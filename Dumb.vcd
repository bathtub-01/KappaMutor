$version
    Generated by VerilatedVcd
$end
$timescale 1 ms $end
$scope module TOP $end
$scope module svsimTestbench $end
$scope module dut $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var wire 3 # rdAddr [2:0] $end
$var wire 8 $ _mem_ext_R0_data [7:0] $end
$var wire 1 % wrEna $end
$var wire 8 & wrData [7:0] $end
$var wire 3 ' wrAddr [2:0] $end
$scope module mem_ext $end
$var wire 3 ( R0_addr [2:0] $end
$var wire 1 ) R0_en $end
$var wire 1 * R0_clk $end
$var wire 3 + W0_addr [2:0] $end
$var wire 1 , W0_en $end
$var wire 1 - W0_clk $end
$var wire 8 . W0_data [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
bx !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
bx *
bxxx +
bx ,
bx -
bxxxxxxxx .
#0
bx !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
bx *
bxxx +
bx ,
bx -
bxxxxxxxx .
bx !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
bx *
bxxx +
bx ,
bx -
bxxxxxxxx .
bx !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
bx *
bxxx +
bx ,
bx -
bxxxxxxxx .
bx !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
bx *
bxxx +
bx ,
bx -
bxxxxxxxx .
bx !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
bx *
bxxx +
bx ,
bx -
bxxxxxxxx .
bx !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
bx *
bxxx +
bx ,
bx -
bxxxxxxxx .
bx !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
bx *
bxxx +
bx ,
bx -
bxxxxxxxx .
bx !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
bx *
bxxx +
bx ,
bx -
bxxxxxxxx .
bx !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
bx *
bxxx +
bx ,
bx -
bxxxxxxxx .
b0 !
bx "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
b0 *
bxxx +
bx ,
b0 -
bxxxxxxxx .
b0 !
b0 "
bxxx #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
bxxx (
bx )
b0 *
bxxx +
bx ,
b0 -
bxxxxxxxx .
b0 !
b0 "
b000 #
b00000000 $
bx %
bxxxxxxxx &
bxxx '
b000 (
bx )
b0 *
bxxx +
bx ,
b0 -
bxxxxxxxx .
b0 !
b0 "
b000 #
b00000000 $
b0 %
bxxxxxxxx &
bxxx '
b000 (
bx )
b0 *
bxxx +
b0 ,
b0 -
bxxxxxxxx .
b0 !
b0 "
b000 #
b00000000 $
b0 %
b00000000 &
bxxx '
b000 (
bx )
b0 *
bxxx +
b0 ,
b0 -
b00000000 .
b0 !
b0 "
b000 #
b00000000 $
b0 %
b00000000 &
b000 '
b000 (
bx )
b0 *
b000 +
b0 ,
b0 -
b00000000 .
b0 !
b0 "
b000 #
b00000000 $
b0 %
b00000000 &
b000 '
b000 (
b1 )
b0 *
b000 +
b0 ,
b0 -
b00000000 .
#1
b1 !
b0 "
b000 #
b00000000 $
b0 %
b00000000 &
b000 '
b000 (
b1 )
b1 *
b000 +
b0 ,
b1 -
b00000000 .
#2
b0 !
b0 "
b000 #
b00000000 $
b0 %
b00000000 &
b000 '
b000 (
b1 )
b0 *
b000 +
b0 ,
b0 -
b00000000 .
#3
b1 !
b0 "
b000 #
b00000000 $
b0 %
b00000000 &
b000 '
b000 (
b1 )
b1 *
b000 +
b0 ,
b1 -
b00000000 .
#4
b0 !
b0 "
b000 #
b00000000 $
b0 %
b00000000 &
b000 '
b000 (
b1 )
b0 *
b000 +
b0 ,
b0 -
b00000000 .
#5
b1 !
b0 "
b000 #
b00000000 $
b0 %
b00000000 &
b000 '
b000 (
b1 )
b1 *
b000 +
b0 ,
b1 -
b00000000 .
#6
b0 !
b0 "
b000 #
b00000000 $
b0 %
b00000000 &
b000 '
b000 (
b1 )
b0 *
b000 +
b0 ,
b0 -
b00000000 .
b0 !
b0 "
b000 #
b00000000 $
b1 %
b00000000 &
b000 '
b000 (
b1 )
b0 *
b000 +
b1 ,
b0 -
b00000000 .
b0 !
b0 "
b000 #
b00000000 $
b1 %
b00000011 &
b000 '
b000 (
b1 )
b0 *
b000 +
b1 ,
b0 -
b00000011 .
b0 !
b0 "
b000 #
b00000000 $
b1 %
b00000011 &
b001 '
b000 (
b1 )
b0 *
b001 +
b1 ,
b0 -
b00000011 .
#7
b0 !
b0 "
b000 #
b00000000 $
b1 %
b00000011 &
b001 '
b000 (
b1 )
b0 *
b001 +
b1 ,
b0 -
b00000011 .
b1 !
b0 "
b000 #
b00000000 $
b1 %
b00000011 &
b001 '
b000 (
b1 )
b1 *
b001 +
b1 ,
b1 -
b00000011 .
#8
b0 !
b0 "
b000 #
b00000000 $
b1 %
b00000011 &
b001 '
b000 (
b1 )
b0 *
b001 +
b1 ,
b0 -
b00000011 .
b0 !
b0 "
b001 #
b00000000 $
b1 %
b00000011 &
b001 '
b001 (
b1 )
b0 *
b001 +
b1 ,
b0 -
b00000011 .
b0 !
b0 "
b001 #
b00000000 $
b0 %
b00000011 &
b001 '
b001 (
b1 )
b0 *
b001 +
b0 ,
b0 -
b00000011 .
#9
b0 !
b0 "
b001 #
b00000000 $
b0 %
b00000011 &
b001 '
b001 (
b1 )
b0 *
b001 +
b0 ,
b0 -
b00000011 .
b1 !
b0 "
b001 #
b00000000 $
b0 %
b00000011 &
b001 '
b001 (
b1 )
b1 *
b001 +
b0 ,
b1 -
b00000011 .
#10
